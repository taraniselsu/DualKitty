//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""House"",
            ""id"": ""45afd5e1-181c-4d8c-9a7f-0de9861c5855"",
            ""actions"": [
                {
                    ""name"": ""Move_House"",
                    ""type"": ""Value"",
                    ""id"": ""5e1cc24d-7e3b-4ba1-aabb-f5548cd6e486"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run_House"",
                    ""type"": ""Button"",
                    ""id"": ""157a179d-ea75-4040-9720-f5368896449a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""63181566-aba2-4b14-8e4e-2806e2c0f365"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_House"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1d13ebfb-f384-4696-a76a-01063a921638"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_House"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f17f379c-443b-457a-90f0-1c1f44707c02"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_House"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d9e37380-e51c-48a4-b976-72d188b21589"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_House"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a53aa159-fdc4-45cf-a57c-5874b03e18e0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_House"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bd66989c-54a7-4fa3-91eb-50f6cf5f4c0d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_House"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""488632a7-4e40-4f40-8a7c-54db6bbdc53d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_House"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e174bd79-e91a-47f8-9f12-1fe8db450310"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_House"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6b226653-2958-4853-beea-9757dc00c4a1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_House"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b9e4dec1-8feb-49d0-825f-22a849b7009a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Run_House"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CatTree"",
            ""id"": ""ef0b928c-0d5c-4db3-af30-864b4e3efaec"",
            ""actions"": [
                {
                    ""name"": ""Move_CatTree"",
                    ""type"": ""Value"",
                    ""id"": ""f09c3ded-fe94-4508-9b2c-4e74138e9596"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump_CatTree"",
                    ""type"": ""Button"",
                    ""id"": ""2d0df239-5c8c-4929-82ba-d0622ed92b24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aee7fae0-4cd2-492f-bcb8-dd89f8099465"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Jump_CatTree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""980bd350-41fa-40ce-9e41-08a6e81fc844"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump_CatTree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c99680d5-0e8a-4878-8efe-e9818c2b6efb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_CatTree"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d01992f4-09a8-471a-8ff1-af341bebf10a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_CatTree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""513dcd83-4c14-42c4-be1e-f1144d4fc296"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move_CatTree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Zoomies"",
            ""id"": ""1af86a59-6735-41a4-96d9-8ad61414bbb2"",
            ""actions"": [
                {
                    ""name"": ""MoveLateral"",
                    ""type"": ""Value"",
                    ""id"": ""afb59919-858b-4e2a-9a5c-23832d1f46ae"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""da5340d0-b1dd-4de5-afb2-f28e2df4b327"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c3c775ab-63a2-43a7-896d-caa6286f1626"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""885919e8-84d8-4cbb-ac9f-54974711b9ca"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLateral"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ac36d363-85e6-4637-835e-8cfaf82d68b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""MoveLateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""732a73fa-afcd-44df-a44d-dca81f429cd3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""MoveLateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // House
        m_House = asset.FindActionMap("House", throwIfNotFound: true);
        m_House_Move_House = m_House.FindAction("Move_House", throwIfNotFound: true);
        m_House_Run_House = m_House.FindAction("Run_House", throwIfNotFound: true);
        // CatTree
        m_CatTree = asset.FindActionMap("CatTree", throwIfNotFound: true);
        m_CatTree_Move_CatTree = m_CatTree.FindAction("Move_CatTree", throwIfNotFound: true);
        m_CatTree_Jump_CatTree = m_CatTree.FindAction("Jump_CatTree", throwIfNotFound: true);
        // Zoomies
        m_Zoomies = asset.FindActionMap("Zoomies", throwIfNotFound: true);
        m_Zoomies_MoveLateral = m_Zoomies.FindAction("MoveLateral", throwIfNotFound: true);
        m_Zoomies_Accelerate = m_Zoomies.FindAction("Accelerate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // House
    private readonly InputActionMap m_House;
    private IHouseActions m_HouseActionsCallbackInterface;
    private readonly InputAction m_House_Move_House;
    private readonly InputAction m_House_Run_House;
    public struct HouseActions
    {
        private @InputActions m_Wrapper;
        public HouseActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move_House => m_Wrapper.m_House_Move_House;
        public InputAction @Run_House => m_Wrapper.m_House_Run_House;
        public InputActionMap Get() { return m_Wrapper.m_House; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HouseActions set) { return set.Get(); }
        public void SetCallbacks(IHouseActions instance)
        {
            if (m_Wrapper.m_HouseActionsCallbackInterface != null)
            {
                @Move_House.started -= m_Wrapper.m_HouseActionsCallbackInterface.OnMove_House;
                @Move_House.performed -= m_Wrapper.m_HouseActionsCallbackInterface.OnMove_House;
                @Move_House.canceled -= m_Wrapper.m_HouseActionsCallbackInterface.OnMove_House;
                @Run_House.started -= m_Wrapper.m_HouseActionsCallbackInterface.OnRun_House;
                @Run_House.performed -= m_Wrapper.m_HouseActionsCallbackInterface.OnRun_House;
                @Run_House.canceled -= m_Wrapper.m_HouseActionsCallbackInterface.OnRun_House;
            }
            m_Wrapper.m_HouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move_House.started += instance.OnMove_House;
                @Move_House.performed += instance.OnMove_House;
                @Move_House.canceled += instance.OnMove_House;
                @Run_House.started += instance.OnRun_House;
                @Run_House.performed += instance.OnRun_House;
                @Run_House.canceled += instance.OnRun_House;
            }
        }
    }
    public HouseActions @House => new HouseActions(this);

    // CatTree
    private readonly InputActionMap m_CatTree;
    private ICatTreeActions m_CatTreeActionsCallbackInterface;
    private readonly InputAction m_CatTree_Move_CatTree;
    private readonly InputAction m_CatTree_Jump_CatTree;
    public struct CatTreeActions
    {
        private @InputActions m_Wrapper;
        public CatTreeActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move_CatTree => m_Wrapper.m_CatTree_Move_CatTree;
        public InputAction @Jump_CatTree => m_Wrapper.m_CatTree_Jump_CatTree;
        public InputActionMap Get() { return m_Wrapper.m_CatTree; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CatTreeActions set) { return set.Get(); }
        public void SetCallbacks(ICatTreeActions instance)
        {
            if (m_Wrapper.m_CatTreeActionsCallbackInterface != null)
            {
                @Move_CatTree.started -= m_Wrapper.m_CatTreeActionsCallbackInterface.OnMove_CatTree;
                @Move_CatTree.performed -= m_Wrapper.m_CatTreeActionsCallbackInterface.OnMove_CatTree;
                @Move_CatTree.canceled -= m_Wrapper.m_CatTreeActionsCallbackInterface.OnMove_CatTree;
                @Jump_CatTree.started -= m_Wrapper.m_CatTreeActionsCallbackInterface.OnJump_CatTree;
                @Jump_CatTree.performed -= m_Wrapper.m_CatTreeActionsCallbackInterface.OnJump_CatTree;
                @Jump_CatTree.canceled -= m_Wrapper.m_CatTreeActionsCallbackInterface.OnJump_CatTree;
            }
            m_Wrapper.m_CatTreeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move_CatTree.started += instance.OnMove_CatTree;
                @Move_CatTree.performed += instance.OnMove_CatTree;
                @Move_CatTree.canceled += instance.OnMove_CatTree;
                @Jump_CatTree.started += instance.OnJump_CatTree;
                @Jump_CatTree.performed += instance.OnJump_CatTree;
                @Jump_CatTree.canceled += instance.OnJump_CatTree;
            }
        }
    }
    public CatTreeActions @CatTree => new CatTreeActions(this);

    // Zoomies
    private readonly InputActionMap m_Zoomies;
    private IZoomiesActions m_ZoomiesActionsCallbackInterface;
    private readonly InputAction m_Zoomies_MoveLateral;
    private readonly InputAction m_Zoomies_Accelerate;
    public struct ZoomiesActions
    {
        private @InputActions m_Wrapper;
        public ZoomiesActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLateral => m_Wrapper.m_Zoomies_MoveLateral;
        public InputAction @Accelerate => m_Wrapper.m_Zoomies_Accelerate;
        public InputActionMap Get() { return m_Wrapper.m_Zoomies; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ZoomiesActions set) { return set.Get(); }
        public void SetCallbacks(IZoomiesActions instance)
        {
            if (m_Wrapper.m_ZoomiesActionsCallbackInterface != null)
            {
                @MoveLateral.started -= m_Wrapper.m_ZoomiesActionsCallbackInterface.OnMoveLateral;
                @MoveLateral.performed -= m_Wrapper.m_ZoomiesActionsCallbackInterface.OnMoveLateral;
                @MoveLateral.canceled -= m_Wrapper.m_ZoomiesActionsCallbackInterface.OnMoveLateral;
                @Accelerate.started -= m_Wrapper.m_ZoomiesActionsCallbackInterface.OnAccelerate;
                @Accelerate.performed -= m_Wrapper.m_ZoomiesActionsCallbackInterface.OnAccelerate;
                @Accelerate.canceled -= m_Wrapper.m_ZoomiesActionsCallbackInterface.OnAccelerate;
            }
            m_Wrapper.m_ZoomiesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveLateral.started += instance.OnMoveLateral;
                @MoveLateral.performed += instance.OnMoveLateral;
                @MoveLateral.canceled += instance.OnMoveLateral;
                @Accelerate.started += instance.OnAccelerate;
                @Accelerate.performed += instance.OnAccelerate;
                @Accelerate.canceled += instance.OnAccelerate;
            }
        }
    }
    public ZoomiesActions @Zoomies => new ZoomiesActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IHouseActions
    {
        void OnMove_House(InputAction.CallbackContext context);
        void OnRun_House(InputAction.CallbackContext context);
    }
    public interface ICatTreeActions
    {
        void OnMove_CatTree(InputAction.CallbackContext context);
        void OnJump_CatTree(InputAction.CallbackContext context);
    }
    public interface IZoomiesActions
    {
        void OnMoveLateral(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
    }
}
